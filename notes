notes on P5
Developer Network <code@nytimes.com>
6:49 PM (8 minutes ago)
using blades101 as username:
Key: a83fb0e20722ea3a4e8b4b05dda2786f:8:38135839

Application: NeighborhoodApp Key: a83fb0e20722ea3a4e8b4b05dda2786f:8:38135839 Status: active Registered: 1 second ago
Key Rate Limits
10	Calls per second
10,000	Calls per day


NYTimes API key
Thank you for requesting a New York Times API key.

Email address: mary.eckmeier@gmail.com
Times Newswire API key: f14813e9cb45a0c1ca38972e6a340ac0:14:73418373

Visit the Times Developer Network at http://developer.nytimes.com for more information about our APIs, including documentation that explains how to use your new key
Key Rate Limits
8	Calls per second
5,000	Calls per day

AppID for foursquare:MyNeighborhoodApp
Owner
Mary Eckmeier
Client id
AZCOO1A0EP35U5A4JTC0PD4LSABZ5PI0ITMSZUH1PNM0N22T
Client secret
G5GOSRQR0DARSWUWS2FO2HUBK103WYUSCNLOLFDGK2JGQVVY

Download / welcome page url
http://meckmeier.github.io/P5-Neighborhood-Map/index.html
Your privacy policy url
http://meckmeier.github.io/P5-Neighborhood-Map/privacy.html
Redirect URI(s)
https://www.foursquare.com


Review our course JavaScript Design Patterns.
Download the Knockout framework.
Write code required to add a full-screen map to your page using the Google Maps API.
Write code required to display map markers identifying a number of locations you are interested in within this neighborhood. This is the set of locations on which you will be searching and filtering in step 5. Your project should include at least 5 locations.
Implement the search bar functionality to search and filter your map markers displayed in step 4. The search function should filter on markers that already show up. Simply providing a search function through a third-party API and displaying the results is not enough.
Implement a list view of the set of locations defined in step 4, Searching and filtering the locations via the search bar will filter the list view and map marker locations accordingly.
Add additional functionality using third-party APIs when a map marker, or list view entry is clicked (ex. Yelp reviews, Wikipedia, Flickr images, etc). If you need a refresher on making AJAX requests to third-party servers, check out our Intro to AJAX course.
Add additional functionality to animate a map marker when either the list item associated with it or the map marker itself is selected.
Add additional functionality to open an infoWindow with the information described in step 7 when either a location is selected from the list view or its map marker is selected directly.
Interface should be very intuitive to use. For example, search box should be easy to locate. It should be easy to understand what set of locations is being filtered. Selecting a location via list item or map marker should cause the map marker to bounce or in some other way animate to indicate that the location has been selected and associated info window opens above map marker with additional information.
https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/ - for flex box guidance


var myPlaces = [];
var content = [];
var markers = [];
var fourSquarePhotos = [];
var fourSquareLikes = [];

//load JSON neighborhood data from neighborhood.json in to empty myPlaces array
$.getJSON("js/neighborhood.json", function(data) {
	viewModel.myPlaces(data);
	$.each(data, function(i) {
		myPlaces.push(data[i]);
	});
	console.log(myPlaces);
}).fail(function() {console.log('error')})



//create and set Google Map with marker
function initialize() {
	var mapCanvas = document.getElementById('map');
		var mapOptions = {
 		center: new google.maps.LatLng(41.924707, -87.700333),
  		zoom: 14,
  		mapTypeId: google.maps.MapTypeId.ROADMAP
		}
	var map = new google.maps.Map(mapCanvas, mapOptions)
//loop through myPlaces array and place a marker and infowindow at each lat/long
	for (i=0; i< myPlaces.length; i++) {
		markers[i] = new google.maps.Marker({
			position: {lat: myPlaces[i].lat, lng:myPlaces[i].long},
			map: map,
			title: myPlaces[i].name,
			animation: google.maps.Animation.DROP
		}); //end marker
		google.maps.event.addListener(markers[i], 'click', toggleBounce);
		//api call to foursquare
		var foursquareUrl = "https://api.foursquare.com/v2/venues/" + myPlaces[i].venueid + '?client_id=0J2DPJP1QTTH5Q5URVIY1BZOTVS5F01A3A41GW4NDHOJCCDH&client_secret=5RBWCXTH5414FN21DBJY1PIFM2TN3GAWRZ4WIWVRZRY1ZI1T&v=20151110';
		$.getJSON(foursquareUrl).done(function(data){
			var photo = data.response.venue.bestPhoto.canonicalUrl;
			console.log(data);
			var likes = data.response.venue.likes.count;
			var like = likes.toString();
			fourSquarePhotos.push(photo);
			fourSquareLikes.push(like);
		})

		//push all infowindow contents to the contents array
		content.push('<div>'+ myPlaces[i].type + '</div>' + '<div>'+ myPlaces[i].summary+ '</div>' + '<div><a href='+ myPlaces[i].url+ '>' + myPlaces[i].url + '</a></div>' + '<div>Likes ' + fourSquareLikes[i] + '</div><div><img src="' + fourSquarePhotos[i] + '"></div>');
		attachWindow(markers[i], content[i]);
	} //end for loop
	google.maps.event.addListener(button, 'click', toggleBounce);
} //end initialize

//add infowindows and attach to corresponding marker
function attachWindow(marker, contents) {
  var infowindow = new google.maps.InfoWindow({
    content: contents
  });
  marker.addListener('click', function() {
    infowindow.open(marker.get('map'), marker);
  });
}

//bounce markers on click, end after 1.5sec
var toggleBounce = function(marker) {
	var self = this;
	if(self.getAnimation() !== null) {
		self.setAnimation(null);
	} else {
		self.setAnimation(google.maps.Animation.BOUNCE);
		setTimeout(function(){self.setAnimation(null); }, 1500);
	}
}

//run initialize function for google map on window load
google.maps.event.addDomListener(window, 'load', initialize);

//create empty data array, apply Knockout.js
var data = [];
var viewModel = {
	markers: ko.observableArray(),
	myPlaces: ko.observableArray(data),
	query: ko.observable(''),
	buttonClick: function() {
		console.log('clicked');
		toggleBounce(markers);
	},
	search: function(value) {
		viewModel.myPlaces.removeAll();

		for(var x in myPlaces) {
			markers[x].setVisible(false);
			if(myPlaces[x].name.toLowerCase().indexOf(value.toLowerCase()) >= 0){
				viewModel.myPlaces.push(myPlaces[x]);
				markers[x].setVisible(true);
			}
		}
	}
};



$(document).ready(function() {
	ko.applyBindings(viewModel);
});
viewModel.query.subscribe(viewModel.search);

Status API Training Shop Blog About Pricing
Â© 2015 GitHub, Inc. Terms Privacy Security Contact Help
})


// Make AJAX request to Foursquare
			$.ajax({
					url: 'https://api.foursquare.com/v2/venues/' + placeItem.id() +
					'?client_id=NONGGLXBKX5VFFIKKEK1HXQPFAFVMEBTRXBWJUPEN4K14JUE&client_secret=ZZDD1SLJ4PA2X4AJ4V23OOZ53UM4SFZX0KORGWP5TZDK4YYJ&v=20130815',
					dataType: "json",
					success: function (data) {
							// Make results easier to handle
							var result = data.response.venue;

							// placeItem.name(result.name);

							// The following lines handle inconsistent results from Foursquare
							// Check each result for properties, if the property exists,
							// add it to the Place constructor
							// Credit https://discussions.udacity.com/t/foursquare-results-undefined-until-the-second-click-on-infowindow/39673/2
							var contact = result.hasOwnProperty('contact') ? result.contact : '';
							if (contact.hasOwnProperty('formattedPhone')) {
									placeItem.phone(contact.formattedPhone || '');
							}

							var location = result.hasOwnProperty('location') ? result.location : '';
							if (location.hasOwnProperty('address')) {
									placeItem.address(location.address || '');
							}

							var bestPhoto = result.hasOwnProperty('bestPhoto') ? result.bestPhoto : '';
							if (bestPhoto.hasOwnProperty('prefix')) {
									placeItem.photoPrefix(bestPhoto.prefix || '');
							}

							if (bestPhoto.hasOwnProperty('suffix')) {
									placeItem.photoSuffix(bestPhoto.suffix || '');
							}

							var description = result.hasOwnProperty('description') ? result.description : '';
							placeItem.description(description || '');

							var rating = result.hasOwnProperty('rating') ? result.rating : '';
							placeItem.rating(rating || 'none');

							var url = result.hasOwnProperty('url') ? result.url : '';
							placeItem.url(url || '');

							placeItem.canonicalUrl(result.canonicalUrl);
